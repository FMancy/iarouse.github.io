<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cross domain | iArouse]]></title>
  <link href="http://iarouse.github.io/blog/categories/cross-domain/atom.xml" rel="self"/>
  <link href="http://iarouse.github.io/"/>
  <updated>2013-11-08T15:05:09+08:00</updated>
  <id>http://iarouse.github.io/</id>
  <author>
    <name><![CDATA[iArouse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cross Domain in AngularJS Development]]></title>
    <link href="http://iarouse.github.io/blog/2013/11/08/cross-domain-in-angularjs-development/"/>
    <updated>2013-11-08T13:41:00+08:00</updated>
    <id>http://iarouse.github.io/blog/2013/11/08/cross-domain-in-angularjs-development</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>As web developers, a common problem we come cross is <em>cross domain</em> because of the <a href="http://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy restrictions</a>.</p>

<table>
<thead>
<tr>
<th></th>
<th> URL           </th>
<th align="center"> Outcomes          </th>
<th align="center"> Reason               </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.a.com/b.html">http://www.a.com/b.html</a> </td>
<td align="center"> Success </td>
<td align="center"> Same protocol and host</td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/dir/a.html">http://www.a.com/dir/a.html</a> <br /> <a href="http://www.a.com/dir2/b.html">http://www.a.com/dir2/b.html</a> </td>
<td align="center"> Success </td>
<td align="center"> Same protocol and host</td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://username:password@www.a.com/b.html">http://username:password@www.a.com/b.html</a> </td>
<td align="center"> Success </td>
<td align="center"> Same protocol and host</td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.a.com:81/b.html">http://www.a.com:81/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different port. <br /> The default is <strong>80</strong>, the other is <strong>81</strong></td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="https://www.a.com/b.html">https://www.a.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different protocol. <br />One is <strong>http</strong>, and the other is <strong>https</strong></td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.b.com/b.html">http://www.b.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host</td>
</tr>
<tr>
<td></td>
<td><a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www2.a.com/b.html">http://www2.a.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host (exact match required)</td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://a.com/b.html">http://a.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host (exact match required)</td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://60.191.124.236/b.html">http://60.191.124.236/b.html</a> (The IP of site) </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host (exact match required)</td>
</tr>
<tr>
<td></td>
<td> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.a.com:80/b.html">http://www.a.com:80/b.html</a> </td>
<td align="center"> <em>Don&rsquo;t use</em> </td>
<td align="center"> Port explicit. Depends on implementation in browser.</td>
</tr>
</tbody>
</table>


<p>In my project, I used <a href="http://yeoman.io/">Yeoman</a> AngularJS Generator to kickstart the project and automate the tasks. It comes with a <a href="http://gruntjs.com/">Grunt</a> plugin named <a href="https://github.com/gruntjs/grunt-contrib-connect">grunt-contrib-connect</a> to start a static web server.</p>

<p>So here comes my problem, My AngularJS application is running on
<code>
http://localhost:9000/
</code></p>

<p>While my NodeJS back end is running on
<code>
http://localhost:3000/
</code>
I have to do something to cross domain.</p>

<br />


<h2>Solutions</h2>

<p>There are lots of solutions out there. The most common ones are:</p>

<ul>
<li>Using iframe</li>
<li>JSONP</li>
<li>CORS (Cross-Orign Resource Sharing)</li>
<li>Server Side Proxies</li>
</ul>


<p><strong>Using iframe</strong>. Personally I don&rsquo;t like the solution, there&rsquo;s too much work to do.</p>

<p><strong>JSONP</strong> is good. Yet the limitations hold me back, such as only GET HTTP requests, no Response Status, XSS attack.</p>

<p><strong>CORS</strong> is good. Yet IE8 and 9 spoil the party (support only with the non-standard XDomainRequest object).</p>

<p>As a result, the CORS requests are not supported with the AngularJS $http service on IE 8 and 9.</p>

<p><strong>Server Side Proxies</strong> comes to rescue. In real project, I use it to handle the cross domain issue.</p>

<p>Yet in development, there&rsquo;s <strong>an easier one</strong>. See Below:</p>

<br />


<h2>The Best Solution (From My Point of View)</h2>

<p>In my project, the best solution I think is using the Grunt plugin named <a href="https://github.com/drewzboto/grunt-connect-proxy">grunt-connect-proxy</a></p>

<p>I am a little excited when I find it. It&rsquo;s well documented and easy to use.</p>

<p>So I use it in my project.</p>

<p>But after I do exact as it documented, grunt-connect-proxy is NOT working.</p>

<p>It takes me a long to figure it out. Thanks to my buddy, I finally make it work :)</p>

<p>In your NodeJS app.js file, you need to add following code:</p>

<p>```javascript
app.use(function(req, res, next) {</p>

<pre><code>res.setHeader("Access-Control-Allow-Origin", "*");
res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
return next();
</code></pre>

<p>});
```</p>

<p>Now it&rsquo;s working good :)</p>
]]></content>
  </entry>
  
</feed>
