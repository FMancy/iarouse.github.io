<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | iArouse]]></title>
  <link href="http://iarouse.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://iarouse.github.io/"/>
  <updated>2013-11-14T09:58:05+08:00</updated>
  <id>http://iarouse.github.io/</id>
  <author>
    <name><![CDATA[iArouse]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use jQuery Plugin with AngularJS the Easy (Lazy) Way]]></title>
    <link href="http://iarouse.github.io/blog/2013/11/14/use-jquery-plugin-with-angularjs-the-easy-lazy-way/"/>
    <updated>2013-11-14T09:11:00+08:00</updated>
    <id>http://iarouse.github.io/blog/2013/11/14/use-jquery-plugin-with-angularjs-the-easy-lazy-way</id>
    <content type="html"><![CDATA[<p>Inevitably, we will want to use jQuery plugin with AngularJS.</p>

<p>Ideally, we should convert the plugin into an AngularJS directive, like <a href="https://github.com/angular-ui/bootstrap">Angular UI Bootstrap</a> do.</p>

<p>Yet today, we&rsquo;ll make the plugin work the easy (lazy) way.</p>

<p>You just need to write <strong>less than 10 lines</strong> (if you use CoffeeScript) to make the plugin work.</p>

<p>Before we start, take a look at the <strong><a href="http://plnkr.co/edit/VeKu5lysANal26bRL4zN?p=preview">Demo Here</a></strong></p>

<hr />

<p>We&rsquo;ll use <a href="https://github.com/fronteed/iCheck">jQuery iCheck plugin</a> in this example</p>

<p>Normally, we&rsquo;ll include the CSS and JS file, and write some jQuery code to init it.</p>

<p>In AngularJS, we use a directive to handle it.</p>

<h3>First, include the resource files</h3>

<p>```html
  <head></p>

<pre><code>&lt;!-- The CSS file of iCheck plugin --&gt;
&lt;link rel="stylesheet" href="http://damirfoy.com/iCheck/skin/all.css?v=0.9.1"&gt;
&lt;!-- jQuery --&gt;
&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;!-- The JS file of iCheck plugin --&gt;
&lt;script src="http://damirfoy.com/iCheck/jquery.icheck.min.js?v=0.9.1"&gt;&lt;/script&gt;
&lt;!-- AngularJS --&gt;
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js"&gt;&lt;/script&gt;
&lt;!-- Custom Script --&gt;
&lt;script src="script.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
```
Note: normally, you&rsquo;ll want to put the scripts in the bottom, yet here we put all resources in the &ldquo;head&rdquo; for simplicity.</p>

<h3>Second, Write our markup</h3>

<p>```html
  <body data-ng-app="app"></p>

<pre><code>&lt;h1&gt;Hello Plunker!&lt;/h1&gt;
&lt;input type="radio" data-ui-radio data-radio-style="blue" name="iCheck"&gt;
&lt;input type="radio" data-ui-radio data-radio-style="blue" name="iCheck" checked&gt;
</code></pre>

<p>  </body>
<code>
"data-ui-radio" is our directive :)
and we use "data-radio-style" to make it more flexible, so that if user prefer a red one, he just need to change the value from "blue" to "red", like this"
</code>
data-radio-style=&ldquo;red&rdquo;
```
Again you can see it in action in the <strong><a href="http://plnkr.co/edit/VeKu5lysANal26bRL4zN?p=preview">Demo</a></strong></p>

<h3>Write an AngularJS direcitive to make it work</h3>

<p>The JavaScript version:
```javascript
angular.module(&lsquo;app&rsquo;, []).directive(&lsquo;uiRadio&rsquo;, [ function () {</p>

<pre><code>return {
    restrict: 'A',
    link: function (scope, ele, attrs) {
        style = 'iradio_flat-' + ele.attr('data-radio-style');

        ele.iCheck({
            radioClass: style
        });
    }
}
</code></pre>

<p>  }
])
```</p>

<p>The CoffeeScript version (if you prefer):
```coffeescript
angular.module(&lsquo;app.form.ui&rsquo;, [])</p>

<p>.directive(&lsquo;uiRadio&rsquo;, [ &ndash;></p>

<pre><code>{
    restrict: 'A'
    link: (scope, ele, attrs) -&gt;
        style = 'iradio_flat-' + ele.attr('data-radio-style')

        ele.iCheck(
            radioClass: style
        )
}
</code></pre>

<p>])
```</p>

<p>Again, you can refer to the <strong><a href="http://plnkr.co/edit/VeKu5lysANal26bRL4zN?p=preview">Demo Here</a></strong> to see the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Domain in AngularJS Development]]></title>
    <link href="http://iarouse.github.io/blog/2013/11/08/cross-domain-in-angularjs-development/"/>
    <updated>2013-11-08T13:41:00+08:00</updated>
    <id>http://iarouse.github.io/blog/2013/11/08/cross-domain-in-angularjs-development</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>As web developers, a common problem we come cross is <em>cross domain</em> because of the <a href="http://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy restrictions</a>.</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> URL           </th>
<th align="center"> Outcomes          </th>
<th align="center"> Reason               </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.a.com/b.html">http://www.a.com/b.html</a> </td>
<td align="center"> Success </td>
<td align="center"> Same protocol and host</td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/dir/a.html">http://www.a.com/dir/a.html</a> <br /> <a href="http://www.a.com/dir2/b.html">http://www.a.com/dir2/b.html</a> </td>
<td align="center"> Success </td>
<td align="center"> Same protocol and host</td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://username:password@www.a.com/b.html">http://username:password@www.a.com/b.html</a> </td>
<td align="center"> Success </td>
<td align="center"> Same protocol and host</td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.a.com:81/b.html">http://www.a.com:81/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different port. <br /> The default is <strong>80</strong>, the other is <strong>81</strong></td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="https://www.a.com/b.html">https://www.a.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different protocol. <br />One is <strong>http</strong>, and the other is <strong>https</strong></td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.b.com/b.html">http://www.b.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host</td>
</tr>
<tr>
<td></td>
<td align="center"><a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www2.a.com/b.html">http://www2.a.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host (exact match required)</td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://a.com/b.html">http://a.com/b.html</a> </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host (exact match required)</td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://60.191.124.236/b.html">http://60.191.124.236/b.html</a> (The IP of site) </td>
<td align="center"> <strong>Failure</strong> </td>
<td align="center"> Different host (exact match required)</td>
</tr>
<tr>
<td></td>
<td align="center"> <a href="http://www.a.com/a.html">http://www.a.com/a.html</a> <br /> <a href="http://www.a.com:80/b.html">http://www.a.com:80/b.html</a> </td>
<td align="center"> <em>Don&rsquo;t use</em> </td>
<td align="center"> Port explicit. Depends on implementation in browser.</td>
</tr>
</tbody>
</table>


<p>In my project, I used <a href="http://yeoman.io/">Yeoman</a> AngularJS Generator to kickstart the project and automate the tasks ( Loved it :D ). It comes with a <a href="http://gruntjs.com/">Grunt</a> plugin named <a href="https://github.com/gruntjs/grunt-contrib-connect">grunt-contrib-connect</a> to start a static web server.</p>

<p>So here comes my problem, My AngularJS application is running on
<code>
http://localhost:9000/
</code></p>

<p>While the NodeJS back end is running on
<code>
http://localhost:3000/
</code>
I have to do something to cross domain.</p>

<br />


<h2>Solutions</h2>

<p>There are lots of solutions out there. The most common ones are:</p>

<ul>
<li>Using iframe</li>
<li>JSONP</li>
<li>CORS (Cross-Orign Resource Sharing)</li>
<li>Server Side Proxies</li>
</ul>


<p><strong>Using iframe</strong>. Personally I don&rsquo;t like the solution, there&rsquo;s too much work to do.</p>

<p><strong>JSONP</strong> is good. Yet the limitations hold me back, such as only GET HTTP requests, no Response Status, XSS attack.</p>

<p><strong>CORS</strong> is good. Yet IE8 and 9 spoil the party (support only with the non-standard XDomainRequest object).</p>

<p>As a result, the CORS requests are not supported with the AngularJS $http service on IE 8 and 9.</p>

<p><strong>Server Side Proxies</strong> comes to rescue. In real project, I use it to handle the cross domain issue.</p>

<p>Yet in development, there&rsquo;s <strong>an easier one</strong>. See Below:</p>

<br />


<h2>The Best Solution (From My Point of View)</h2>

<p>In my project, the best solution I think is using the Grunt plugin named <a href="https://github.com/drewzboto/grunt-connect-proxy">grunt-connect-proxy</a></p>

<p>I am a little excited when I find it. It&rsquo;s well documented and easy to use.</p>

<p>So I used it in my project.</p>

<p>But after I do exact as it documented, grunt-connect-proxy is NOT working.</p>

<p>It takes me a long to figure it out. Thanks to my buddy, I finally make it work :)</p>

<p>In your NodeJS app.js file, you need to add following code:</p>

<p>```javascript
app.use(function(req, res, next) {</p>

<pre><code>res.setHeader("Access-Control-Allow-Origin", "*");
res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
return next();
</code></pre>

<p>});
```</p>

<p>Now it&rsquo;s working good :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Animation Examples]]></title>
    <link href="http://iarouse.github.io/blog/2013/11/04/angularjs-animation-examples/"/>
    <updated>2013-11-04T13:31:00+08:00</updated>
    <id>http://iarouse.github.io/blog/2013/11/04/angularjs-animation-examples</id>
    <content type="html"><![CDATA[<h3></h3>

<h3>ngHide and ngShow</h3>

<table>
<thead>
<tr>
<th></th>
<th>               </th>
<th align="center"> Starting CSS          </th>
<th align="center"> Ending CSS               </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Hide          </td>
<td align="center"> .ng-hide-add          </td>
<td align="center"> .ng-hide-add-active      </td>
</tr>
<tr>
<td></td>
<td> Show          </td>
<td align="center"> .ng-hide-remove       </td>
<td align="center"> .ng-hide-remove-active </td>
</tr>
</tbody>
</table>


<br/>


<h3>ngRepeat, ngInclude, ngIf, ngView</h3>

<table>
<thead>
<tr>
<th></th>
<th>               </th>
<th align="center"> Starting CSS          </th>
<th align="center"> Ending CSS             </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> eanter        </td>
<td align="center"> .ng-enter             </td>
<td align="center"> .ng-enter-active</td>
</tr>
<tr>
<td></td>
<td> leave         </td>
<td align="center"> .ng-leave             </td>
<td align="center"> .ng-leave-active</td>
</tr>
<tr>
<td></td>
<td> move          </td>
<td align="center"> .ng-move              </td>
<td align="center"> .ng-move-active</td>
</tr>
</tbody>
</table>


<br/>


<h2>Common AngularJS Animation in Action</h2>

<p>Fade, slide, shuffle</p>

<br/>


<h2>Learning AngularJS animation (1.2) Resource</h2>

<ul>
<li>Well written AngularJS API <a href="http://docs.angularjs.org/api/ngAnimate">ngAnimate</a></li>
<li><a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html">Remastered Animation in AngularJS 1.2</a> by <a href="https://github.com/matsko">Yearofmoo</a> (Member of <strong>AngularJS Team</strong>, and the one that is responsible for writing the new animations API in AngularJS.)</li>
<li><a href="http://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/">Preparing for Animations in Angular 1.2.0</a> by <a href="http://www.johnpapa.net/about/">John Papa</a></li>
<li><a href="http://www.ng-newsletter.com/posts/angular-animation.html">Angular Animation &ndash; Under the Hood</a> by Ari Lerner</li>
<li><a href="http://onehungrymind.com/build-sweet-photo-slider-angularjs-animate/">Build a Sweet Photo Slider with AngularJS Animate</a> by simpulton</li>
</ul>


<p>Video Tutorial:</p>

<ul>
<li><a href="http://egghead.io/lessons">http://egghead.io/lessons</a> &ndash; video 48, 49, 50</li>
<li><a href="http://www.pluralsight.com/training/Courses/TableOfContents/build-apps-angular-breeze">Building Apps with Angular and Breeze</a> &ndash; 11. Animations with Angular and CSS</li>
</ul>


<p>and CSS Animation:</p>

<ul>
<li><a href="https://github.com/h5bp/Effeckt.css">Effeckt.css</a></li>
<li><a href="https://github.com/daneden/animate.css">Animate.css</a></li>
<li><a href="https://github.com/lvivski/anima">anima</a></li>
<li><a href="https://github.com/ThrivingKings/animo.js">animo.js</a></li>
<li>and Codrops <a href="http://tympanus.net/codrops/tag/animation/">animation</a>, <a href="http://tympanus.net/codrops/tag/transition/">transition</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS - Avoid Flash of Unstyled Content (FOUC)]]></title>
    <link href="http://iarouse.github.io/blog/2013/10/30/angularjs-avoid-flash-of-unstyled-content-fouc/"/>
    <updated>2013-10-30T17:10:00+08:00</updated>
    <id>http://iarouse.github.io/blog/2013/10/30/angularjs-avoid-flash-of-unstyled-content-fouc</id>
    <content type="html"><![CDATA[<h2>When will FOUC happen?</h2>

<ul>
<li>When downloading the page yet AngularJS hasn&rsquo;t loaded and run to take care of the bindings.</li>
<li>When the site is fetching data from the back end.</li>
</ul>


<p>Then you&rsquo;ll see something like this:</p>

<p></p>

<p><code>
{{people.name}}
{{people.age}}
</code>
</p>

<h2>How to avoid Flash of Unstyled Content (FOUC) in AngularJS?</h2>

<ul>
<li>Use Angular&rsquo;s directive, like ng-bind, ng-class, ng-sct etc.</li>
<li>Use <a href="http://docs.angularjs.org/api/ng.directive:ngCloak">ng-cloak</a></li>
<li>Use loader, for instance, show the spinner while downloading the page, and hide it when angular has a chance to run</li>
</ul>


<h3>Use Angular&rsquo;s directive, like ng-bind, ng-class, ng-sct etc.</h3>

<p>That is, instead of using</p>

<p>
```
<body class="{{ bodyClass }}">
<img src="{{imgSrc}}" alt=""></p>

<p>{{site.content}}</p>


<p>```
</p>

<p>use</p>

<p>
```
<body ng-class="{{ bodyClass }}">
<img ng-src="{{imgSrc}}" alt=""></p>

<p ng-bind="{{site.content}}"></p>


<p>```
</p>

<h3>Use ng-cloak</h3>

<p>You can refer to angularjs api for more info on how to use <a href="http://docs.angularjs.org/api/ng.directive:ngCloak">ng-cloak</a></p>

<p>In short, you need to do 2 things:</p>

<ol>
<li>Add some CSS style in order to make ngCloak work</li>
<li>Modify the markup</li>
</ol>


<h3>Use loader, and hide it when AngularJS runs</h3>

<p>For instance, you can put the image loader in your HMTL, with <strong>ng-hide=&ldquo;true&rdquo;</strong>
<code>
&lt;img scr="spinner.gif" ng-hide="true"/&gt;
</code>
Then it&rsquo;ll show the spinner before angularjs runs, and it will be hidden when angularjs comes in, since it has a ngHide directive that is set to true.</p>
]]></content>
  </entry>
  
</feed>
